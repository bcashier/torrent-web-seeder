// Code generated by protoc-gen-go. DO NOT EDIT.
// source: torrent-web-seeder.proto

package torrent_web_seeder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatReply_Status int32

const (
	StatReply_INITIALIZATION    StatReply_Status = 0
	StatReply_SEEDING           StatReply_Status = 1
	StatReply_IDLE              StatReply_Status = 2
	StatReply_TERMINATED        StatReply_Status = 3
	StatReply_WAITING_FOR_PEERS StatReply_Status = 4
)

var StatReply_Status_name = map[int32]string{
	0: "INITIALIZATION",
	1: "SEEDING",
	2: "IDLE",
	3: "TERMINATED",
	4: "WAITING_FOR_PEERS",
}
var StatReply_Status_value = map[string]int32{
	"INITIALIZATION":    0,
	"SEEDING":           1,
	"IDLE":              2,
	"TERMINATED":        3,
	"WAITING_FOR_PEERS": 4,
}

func (x StatReply_Status) String() string {
	return proto.EnumName(StatReply_Status_name, int32(x))
}
func (StatReply_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2, []int{1, 0}
}

// Stat request message
type StatRequest struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatRequest) Reset()         { *m = StatRequest{} }
func (m *StatRequest) String() string { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()    {}
func (*StatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2, []int{0}
}
func (m *StatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatRequest.Unmarshal(m, b)
}
func (m *StatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatRequest.Marshal(b, m, deterministic)
}
func (dst *StatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatRequest.Merge(dst, src)
}
func (m *StatRequest) XXX_Size() int {
	return xxx_messageInfo_StatRequest.Size(m)
}
func (m *StatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatRequest proto.InternalMessageInfo

func (m *StatRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Stat response message
type StatReply struct {
	Total                int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Completed            int64            `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	Peers                int32            `protobuf:"varint,3,opt,name=peers,proto3" json:"peers,omitempty"`
	Status               StatReply_Status `protobuf:"varint,4,opt,name=status,proto3,enum=StatReply_Status" json:"status,omitempty"`
	Pieces               []*Piece         `protobuf:"bytes,5,rep,name=pieces,proto3" json:"pieces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StatReply) Reset()         { *m = StatReply{} }
func (m *StatReply) String() string { return proto.CompactTextString(m) }
func (*StatReply) ProtoMessage()    {}
func (*StatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2, []int{1}
}
func (m *StatReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatReply.Unmarshal(m, b)
}
func (m *StatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatReply.Marshal(b, m, deterministic)
}
func (dst *StatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatReply.Merge(dst, src)
}
func (m *StatReply) XXX_Size() int {
	return xxx_messageInfo_StatReply.Size(m)
}
func (m *StatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatReply proto.InternalMessageInfo

func (m *StatReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *StatReply) GetCompleted() int64 {
	if m != nil {
		return m.Completed
	}
	return 0
}

func (m *StatReply) GetPeers() int32 {
	if m != nil {
		return m.Peers
	}
	return 0
}

func (m *StatReply) GetStatus() StatReply_Status {
	if m != nil {
		return m.Status
	}
	return StatReply_INITIALIZATION
}

func (m *StatReply) GetPieces() []*Piece {
	if m != nil {
		return m.Pieces
	}
	return nil
}

type Piece struct {
	Position             int64    `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Complete             bool     `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Piece) Reset()         { *m = Piece{} }
func (m *Piece) String() string { return proto.CompactTextString(m) }
func (*Piece) ProtoMessage()    {}
func (*Piece) Descriptor() ([]byte, []int) {
	return fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2, []int{2}
}
func (m *Piece) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Piece.Unmarshal(m, b)
}
func (m *Piece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Piece.Marshal(b, m, deterministic)
}
func (dst *Piece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Piece.Merge(dst, src)
}
func (m *Piece) XXX_Size() int {
	return xxx_messageInfo_Piece.Size(m)
}
func (m *Piece) XXX_DiscardUnknown() {
	xxx_messageInfo_Piece.DiscardUnknown(m)
}

var xxx_messageInfo_Piece proto.InternalMessageInfo

func (m *Piece) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Piece) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

// Files requst message
type FilesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilesRequest) Reset()         { *m = FilesRequest{} }
func (m *FilesRequest) String() string { return proto.CompactTextString(m) }
func (*FilesRequest) ProtoMessage()    {}
func (*FilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2, []int{3}
}
func (m *FilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesRequest.Unmarshal(m, b)
}
func (m *FilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesRequest.Marshal(b, m, deterministic)
}
func (dst *FilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesRequest.Merge(dst, src)
}
func (m *FilesRequest) XXX_Size() int {
	return xxx_messageInfo_FilesRequest.Size(m)
}
func (m *FilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FilesRequest proto.InternalMessageInfo

type File struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2, []int{4}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (dst *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(dst, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Files reply message
type FilesReply struct {
	Files                []*File  `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilesReply) Reset()         { *m = FilesReply{} }
func (m *FilesReply) String() string { return proto.CompactTextString(m) }
func (*FilesReply) ProtoMessage()    {}
func (*FilesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2, []int{5}
}
func (m *FilesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesReply.Unmarshal(m, b)
}
func (m *FilesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesReply.Marshal(b, m, deterministic)
}
func (dst *FilesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesReply.Merge(dst, src)
}
func (m *FilesReply) XXX_Size() int {
	return xxx_messageInfo_FilesReply.Size(m)
}
func (m *FilesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesReply.DiscardUnknown(m)
}

var xxx_messageInfo_FilesReply proto.InternalMessageInfo

func (m *FilesReply) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto.RegisterType((*StatRequest)(nil), "StatRequest")
	proto.RegisterType((*StatReply)(nil), "StatReply")
	proto.RegisterType((*Piece)(nil), "Piece")
	proto.RegisterType((*FilesRequest)(nil), "FilesRequest")
	proto.RegisterType((*File)(nil), "File")
	proto.RegisterType((*FilesReply)(nil), "FilesReply")
	proto.RegisterEnum("StatReply_Status", StatReply_Status_name, StatReply_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TorrentWebSeederClient is the client API for TorrentWebSeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TorrentWebSeederClient interface {
	// Get file stat
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error)
	// Get file stat stream
	StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (TorrentWebSeeder_StatStreamClient, error)
	// Get file list
	Files(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FilesReply, error)
}

type torrentWebSeederClient struct {
	cc *grpc.ClientConn
}

func NewTorrentWebSeederClient(cc *grpc.ClientConn) TorrentWebSeederClient {
	return &torrentWebSeederClient{cc}
}

func (c *torrentWebSeederClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, "/TorrentWebSeeder/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentWebSeederClient) StatStream(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (TorrentWebSeeder_StatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TorrentWebSeeder_serviceDesc.Streams[0], "/TorrentWebSeeder/StatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &torrentWebSeederStatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TorrentWebSeeder_StatStreamClient interface {
	Recv() (*StatReply, error)
	grpc.ClientStream
}

type torrentWebSeederStatStreamClient struct {
	grpc.ClientStream
}

func (x *torrentWebSeederStatStreamClient) Recv() (*StatReply, error) {
	m := new(StatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *torrentWebSeederClient) Files(ctx context.Context, in *FilesRequest, opts ...grpc.CallOption) (*FilesReply, error) {
	out := new(FilesReply)
	err := c.cc.Invoke(ctx, "/TorrentWebSeeder/Files", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentWebSeederServer is the server API for TorrentWebSeeder service.
type TorrentWebSeederServer interface {
	// Get file stat
	Stat(context.Context, *StatRequest) (*StatReply, error)
	// Get file stat stream
	StatStream(*StatRequest, TorrentWebSeeder_StatStreamServer) error
	// Get file list
	Files(context.Context, *FilesRequest) (*FilesReply, error)
}

func RegisterTorrentWebSeederServer(s *grpc.Server, srv TorrentWebSeederServer) {
	s.RegisterService(&_TorrentWebSeeder_serviceDesc, srv)
}

func _TorrentWebSeeder_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentWebSeederServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TorrentWebSeeder/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentWebSeederServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentWebSeeder_StatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TorrentWebSeederServer).StatStream(m, &torrentWebSeederStatStreamServer{stream})
}

type TorrentWebSeeder_StatStreamServer interface {
	Send(*StatReply) error
	grpc.ServerStream
}

type torrentWebSeederStatStreamServer struct {
	grpc.ServerStream
}

func (x *torrentWebSeederStatStreamServer) Send(m *StatReply) error {
	return x.ServerStream.SendMsg(m)
}

func _TorrentWebSeeder_Files_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentWebSeederServer).Files(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TorrentWebSeeder/Files",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentWebSeederServer).Files(ctx, req.(*FilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TorrentWebSeeder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TorrentWebSeeder",
	HandlerType: (*TorrentWebSeederServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _TorrentWebSeeder_Stat_Handler,
		},
		{
			MethodName: "Files",
			Handler:    _TorrentWebSeeder_Files_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StatStream",
			Handler:       _TorrentWebSeeder_StatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "torrent-web-seeder.proto",
}

func init() {
	proto.RegisterFile("torrent-web-seeder.proto", fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2)
}

var fileDescriptor_torrent_web_seeder_1f4aa54083dda5c2 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x51, 0x6b, 0xdb, 0x30,
	0x10, 0xc7, 0xa3, 0xc6, 0xf6, 0x92, 0x4b, 0x17, 0xdc, 0x63, 0x03, 0xe3, 0x8d, 0xe1, 0x09, 0x06,
	0xee, 0xa0, 0x66, 0x64, 0x1f, 0x60, 0x18, 0xe2, 0x16, 0x41, 0xe7, 0x16, 0xd9, 0x50, 0xe8, 0x4b,
	0x71, 0xda, 0x1b, 0x33, 0xb8, 0xb5, 0x67, 0x29, 0x8c, 0x7d, 0x84, 0x7d, 0xe7, 0x3d, 0x0c, 0xc9,
	0x5e, 0x92, 0x87, 0xd1, 0x37, 0xfd, 0xee, 0xfe, 0x42, 0xf7, 0xff, 0x9f, 0x20, 0xd0, 0x6d, 0xdf,
	0xd3, 0x93, 0x3e, 0xfb, 0x49, 0x9b, 0x33, 0x45, 0xf4, 0x40, 0x7d, 0xd2, 0xf5, 0xad, 0x6e, 0xf9,
	0x7b, 0x58, 0x14, 0xba, 0xd2, 0x92, 0x7e, 0x6c, 0x49, 0x69, 0x44, 0x70, 0xba, 0x4a, 0x7f, 0x0f,
	0x58, 0xc4, 0xe2, 0xb9, 0xb4, 0x67, 0xfe, 0x87, 0xc1, 0x7c, 0xd0, 0x74, 0xcd, 0x2f, 0x7c, 0x05,
	0xae, 0x6e, 0x75, 0xd5, 0x58, 0xc9, 0x54, 0x0e, 0x80, 0x6f, 0x61, 0x7e, 0xdf, 0x3e, 0x76, 0x0d,
	0x69, 0x7a, 0x08, 0x8e, 0x6c, 0x67, 0x5f, 0x30, 0x77, 0x3a, 0xa2, 0x5e, 0x05, 0xd3, 0x88, 0xc5,
	0xae, 0x1c, 0x00, 0x4f, 0xc1, 0x53, 0xba, 0xd2, 0x5b, 0x15, 0x38, 0x11, 0x8b, 0x97, 0xab, 0x93,
	0x64, 0xf7, 0x8a, 0x3d, 0x6d, 0x95, 0x1c, 0x05, 0xf8, 0x0e, 0xbc, 0xae, 0xa6, 0x7b, 0x52, 0x81,
	0x1b, 0x4d, 0xe3, 0xc5, 0xca, 0x4b, 0xae, 0x0d, 0xca, 0xb1, 0xca, 0x6f, 0xc1, 0x1b, 0x6e, 0x20,
	0xc2, 0x52, 0xe4, 0xa2, 0x14, 0xe9, 0xa5, 0xb8, 0x4d, 0x4b, 0x71, 0x95, 0xfb, 0x13, 0x5c, 0xc0,
	0x8b, 0x22, 0xcb, 0xd6, 0x22, 0xbf, 0xf0, 0x19, 0xce, 0xc0, 0x11, 0xeb, 0xcb, 0xcc, 0x3f, 0xc2,
	0x25, 0x40, 0x99, 0xc9, 0xaf, 0x22, 0x4f, 0xcb, 0x6c, 0xed, 0x4f, 0xf1, 0x35, 0x9c, 0xdc, 0xa4,
	0xa2, 0x14, 0xf9, 0xc5, 0xdd, 0xf9, 0x95, 0xbc, 0xbb, 0xce, 0x32, 0x59, 0xf8, 0x0e, 0xff, 0x02,
	0xae, 0x7d, 0x0c, 0x43, 0x98, 0x75, 0xad, 0xaa, 0x75, 0xdd, 0x3e, 0x8d, 0xe6, 0x77, 0x6c, 0x7a,
	0xff, 0xec, 0x5a, 0xfb, 0x33, 0xb9, 0x63, 0xbe, 0x84, 0xe3, 0xf3, 0xba, 0x21, 0x35, 0x66, 0xcc,
	0x43, 0x70, 0x0c, 0xff, 0x37, 0xeb, 0x53, 0x80, 0x51, 0x6b, 0xb2, 0x7e, 0x03, 0xee, 0x37, 0x43,
	0x01, 0xb3, 0xae, 0xdd, 0xc4, 0xf4, 0xe4, 0x50, 0x5b, 0xfd, 0x66, 0xe0, 0x97, 0xc3, 0x5a, 0x6f,
	0x68, 0x53, 0xd8, 0xa5, 0x22, 0x07, 0xc7, 0x04, 0x81, 0xc7, 0xc9, 0xc1, 0x56, 0x43, 0xd8, 0x27,
	0xcb, 0x27, 0xf8, 0x11, 0xc0, 0x60, 0xa1, 0x7b, 0xaa, 0x1e, 0x9f, 0x53, 0x7e, 0x62, 0xf8, 0x01,
	0x5c, 0x3b, 0x0f, 0xbe, 0x4c, 0x0e, 0x3d, 0x84, 0x8b, 0x64, 0x3f, 0x26, 0x9f, 0x6c, 0x3c, 0xfb,
	0x99, 0x3e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x92, 0xa0, 0x37, 0x68, 0x02, 0x00, 0x00,
}
